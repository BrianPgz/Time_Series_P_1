sd=1
data=rnorm(n=n,mean=mean,sd = sd)
data_f=data.frame(x=data)
graph1=ggplot(data_f, aes(x=x)) + geom_histogram(bins=100)
graph1
set.seed(100)
n=365
mean=0
sd=1
data=rnorm(n=n,mean=mean,sd = sd)
data_f=data.frame(x=data)
graph1=ggplot(data_f, aes(x=x)) + geom_histogram(bins=100)
graph1
data_sim=rnorm(n=n,mean=mean,sd = sd)
data_acum=cumsum(data_sim)
data_acum
t=1:n
t
prices=function(x0,mean,sd){
data_sim=rnorm(n=n,mean=mean,sd = sd)
data_acum=cumsum(data_sim)
t=1:n
stock=   x0 + t*mean + data_acum
return(stock)
}
random_walk = prices(x0=x0,mean=mean,sd=sd)
x0=18000
prices=function(x0,mean,sd){
data_sim=rnorm(n=n,mean=mean,sd = sd)
data_acum=cumsum(data_sim)
t=1:n
stock=   x0 + t*mean + data_acum
return(stock)
}
random_walk = prices(x0=x0,mean=mean,sd=sd)
random_frame=data.frame(random_walk)
random_frame
random_frame["time"]=0:n
random_frame["time"]= c(0:n)
random_frame["time"]= c(1:n)
random_frame
x0=18000
prices=function(x0,mean,sd){
data_sim=rnorm(n=n,mean=mean,sd = sd)
data_acum=cumsum(data_sim)
t=1:n
stock=c()
stock[1]=xo
for (i in 2:n ) {
stock[i]=   x0 + t*mean + data_acum
}
return(stock)
}
random_walk = prices(x0=x0,mean=mean,sd=sd)
x0=18000
prices=function(x0,mean,sd){
data_sim=rnorm(n=n,mean=mean,sd = sd)
data_acum=cumsum(data_sim)
t=1:n
stock=c()
stock[1]=xo
for (i in 2:n ) {
stock[i]=   x0 + t*mean + data_acum
}
return(stock)
}
random_walk = prices(x0=x0,mean=mean,sd=sd)
x0=18000
prices=function(x0,mean,sd){
data_sim=rnorm(n=n,mean=mean,sd = sd)
data_acum=cumsum(data_sim)
t=1:n
stock=c()
stock[1]=x0
for (i in 2:n ) {
stock[i]=   x0 + t*mean + data_acum
}
return(stock)
}
random_walk = prices(x0=x0,mean=mean,sd=sd)
random_frame=data.frame(random_walk)
random_frame
x0=18000
prices=function(x0,mean,sd){
data_sim=rnorm(n=n,mean=mean,sd = sd)
data_acum=cumsum(data_sim)
t=1:n
stock=c()
stock[1]=x0
stock[2:n]= x0 + t*mean + data_acum
return(stock)
}
random_walk = prices(x0=x0,mean=mean,sd=sd)
#Random Walk simulation
set.seed(100)
n=364
mean=0
sd=1
data=rnorm(n=n,mean=mean,sd = sd)
data_f=data.frame(x=data)
graph1=ggplot(data_f, aes(x=x)) + geom_histogram(bins=100)
x0=18000
prices=function(x0,mean,sd){
data_sim=rnorm(n=n,mean=mean,sd = sd)
data_acum=cumsum(data_sim)
t=1:n
stock=c()
stock[1]=x0
stock= x0 + t*mean + data_acum
return(stock)
}
random_walk = prices(x0=x0,mean=mean,sd=sd)
random_frame=data.frame(random_walk)
random_frame
random_frame["time"]= c(1:n)
graph2= ggplot(data=random_frame,aes(x=time,y=random_walk)) + geom_line()
graph2
set.seed(101)
n=364
mean=0
sd=1
data=rnorm(n=n,mean=mean,sd = sd)
data_f=data.frame(x=data)
graph1=ggplot(data_f, aes(x=x)) + geom_histogram(bins=100)
x0=18000
prices=function(x0,mean,sd){
data_sim=rnorm(n=n,mean=mean,sd = sd)
data_acum=cumsum(data_sim)
t=1:n
stock=c()
stock[1]=x0
stock= x0 + t*mean + data_acum
return(stock)
}
random_walk = prices(x0=x0,mean=mean,sd=sd)
random_frame=data.frame(random_walk)
random_frame["time"]= c(1:n)
graph2= ggplot(data=random_frame,aes(x=time,y=random_walk)) + geom_line()
graph2
random_walk
install.packages("xlsx")
library("xlsx")
install.packages("xlsx")
library(xlsx)
library("xlsx")
library(xlsx)
library(xlsxjars)
install.packages("rJava")
library(xlsx)
library(xlsxjars)
library(rJava)
install.packages("markovchain")
data_ts=ts(data = data$Monthly.beer.production, start=c(1956,1),end = c(1995,8),frequency = 12)
data_ts
# Pruebas
# read
data=read.csv("monthly_beer.csv")
setwd("~/Septimo/Estadistica 3/proyecto_1/Time_Series_P_1")
# Pruebas
# read
data=read.csv("monthly_beer.csv")
data_ts=ts(data = data$Monthly.beer.production, start=c(1956,1),end = c(1995,8),frequency = 12)
data_ts
tsdisplay(data_ts)
library(forecast)
library(timeSeries)
library(nortest)
library(tseries)
library(TSA)
library(lmtest)
library(ggplot2)
data=read.csv("monthly_beer.csv")
data_ts=ts(data = data$Monthly.beer.production, start=c(1956,1),end = c(1995,8),frequency = 12)
data_ts
tsdisplay(data_ts)
auto=auto.arima(data_ts)
summary(auto)
ggtsdisplay(auto$residuals)
tsdiag(auto) #SE MUERE EL P-VALUE
checkresiduals(auto)
sq_data= log(data_ts)
t1=seq(1956,1995.59,by=1/12)
bptest(sq_data ~ t1)
tsdisplay(sq_data)
mod=auto.arima(sq_data)
summary(mod)
t1 = 1: length(mod$residuals)
bptest(mod$residuals ~ t1)
ggtsdisplay(mod$residuals)
tsdiag(mod, gof.lag = 50)
checkresiduals(mod) #NO JALA EL P-VALUE PARA EL LOGARITMO
sqrt_m=sqrt(data_ts)
ts.plot(sqrt_m)
ts.plot(sq_data)
sqrt_m=sqrt(data_ts)
ts.plot(sqrt_m)
otro_mod=auto.arima(sqrt_m)
summary(otro_mod)
tsdiag(otro_mod, gof.lag = 50) #No jala la correlaion
arim=arima(diff(log(data_ts)),order = c(1,0,1))
arim
tsdiag(arim)
time= 1:length(arim$residuals)
res_num=as.numeric(arim$residuals)
bptest(res_num~time)#varianza constante de residuales
jarque.bera.test(arim$residuals) #es normal
shapiro.test(arim$residuals) #es normal
t.test(arim$residuals,mu=0)#media cero
checkresiduals(arim)
tsdisplay(data_ts)
arim=arima(diff(log(data_ts)),order = c(1,0,1))
arim
tsdiag(arim)
time= 1:length(arim$residuals)
res_num=as.numeric(arim$residuals)
bptest(res_num~time)#varianza constante de residuales
jarque.bera.test(arim$residuals) #es normal
shapiro.test(arim$residuals) #es normal
t.test(arim$residuals,mu=0)#media cero
checkresiduals(arim)
t.test(arim$residuals,mu=0)#media cero
t.test(arim$residuals,mu=0)#media cero
t1=seq(1956,1995.59,by=1/12)
bptest(data_ts~t1)
adf.test(data_ts)
kpss.test(data_ts)
auto=auto.arima(data_ts)
summary(auto)
ggtsdisplay(auto$residuals)
checkresiduals(auto) #descartado
arim=arima(diff(log(data_ts)),order = c(1,0,1))
arim
tsdiag(arim)
time= 1:length(arim$residuals)
res_num=as.numeric(arim$residuals)
bptest(res_num~time)#varianza constante de residuales
jarque.bera.test(arim$residuals) #es normal
shapiro.test(arim$residuals) #es normal
t.test(arim$residuals,mu=0)#media cero
checkresiduals(arim)
arim_2=arima(diff(log(data_ts)),order = c(1,1,1))
arim
tsdiag(arim)
time= 1:length(arim$residuals)
arim_2=arima(diff(log(data_ts)),order = c(1,1,1))
arim_2
tsdiag(arim)
tsdiag(arim_2)
arim_2=arima(diff(log(data_ts)),order = c(2,1,2))
arim_2
tsdiag(arim_2)
arim_2=arima(diff(log(data_ts)),order = c(2,1,3))
arim_2
arim_2=arima(diff(log(data_ts)),order = c(2,1,10))
arim_2
tsdiag(arim_2)
arim_2=arima(diff(log(data_ts)),order = c(3,1,2))
arim_2
tsdiag(arim_2)
arim_2=arima(diff(log(data_ts)),order = c(3,2,2))
arim_2
tsdiag(arim_2)
arim_2=arima(diff(log(data_ts)),order = c(3,3,2))
arim_2
tsdiag(arim_2)
arim_2=arima(diff(log(data_ts)),order = c(3,1,4))
arim_2
tsdiag(arim_2)
arim_2=arima(diff(log(data_ts)),order = c(0,1,2))
arim_2
tsdiag(arim_2)
time= 1:length(arim$residuals)
time= 1:length(arim_2$residuals)
res_num=as.numeric(arim_2$residuals)
time_2= 1:length(arim_2$residuals)
res_num=as.numeric(arim_2$residuals)
lambda = BoxCox.lambda(data_ts, method = "guerrero")
data_cox = BoxCox(data_ts, lambda)
ts.plot(data_cox)
bptest(data_cox~t1)
adf.test(data_cox)
kpss.test(data_cox)
lambda = BoxCox.lambda(data_ts, method = "loglik")
data_cox = BoxCox(data_ts, lambda)
ts.plot(data_cox)
bptest(data_cox~t1)
adf.test(data_cox)
kpss.test(data_cox)
lambda = BoxCox.lambda(data_ts, method = "guerrero")
data_cox = BoxCox(data_ts, lambda)
ts.plot(data_cox)
bptest(data_cox~t1)
adf.test(data_cox)
kpss.test(data_cox)
data_cox_log=log(data_cox)
ts.plot(data_cox_log)
bptest(data_cox_log~t1)
adf.test(data_cox_log)
kpss.test(data_cox_log)
lambda = BoxCox.lambda(data_ts, method = "guerrero")
data_cox = BoxCox(data_ts, lambda)
data_cox = BoxCox(data_ts, lambda)
data_cox_diff=diff(data_cox)
ts.plot(data_cox_diff)
bptest(data_cox_diff~t1)
t_time=1:length(data_cox_diff)
bptest(data_cox_diff~t_time)
lambda = BoxCox.lambda(data_ts, method = "loglik")
data_cox = BoxCox(data_ts, lambda)
data_cox_diff=diff(data_cox)
ts.plot(data_cox_diff)
t_time=1:length(data_cox_diff)
bptest(data_cox_diff~t_time)
lambda = BoxCox.lambda(data_ts, method = "guerrero")
data_cox = BoxCox(data_ts, lambda)
data_cox_diff=diff(data_cox)
ts.plot(data_cox_diff)
t_time=1:length(data_cox_diff)
bptest(data_cox_diff~t_time)
adf.test(data_cox_diff)
kpss.test(data_cox_diff)
adf.test(data_cox_diff)
bptest(data_cox_diff~t_time)
model_cox=auto.arima(data_cox_diff)
summary(model_cox)
times=1:length(model_cox)
bptest(model_cox~times)
bptest(model_cox~times)
bptest(model_cox$residuals~times)
residuals_cox=as.numeric(model_cox$residuals)
bptest(residuals_cox~times)
length(residuals_cox)
length(times)
times=1:length(residuals_cox)
bptest(residuals_cox~times)
checkresiduals(model_cox)
library(forecast)
library(timeSeries)
library(nortest)
library(tseries)
library(TSA)
library(lmtest)
library(ggplot2)
data=read.csv("monthly_beer.csv")
data_ts=ts(data = data$Monthly.beer.production, start=c(1956,1),end = c(1995,8),frequency = 12)
data_ts
tsdisplay(data_ts)
install.packages("changepoint")
library(changepoint)
# Pruebas
# read
library(forecast)
library(timeSeries)
library(nortest)
library(tseries)
library(TSA)
library(lmtest)
library(ggplot2)
data=read.csv("monthly_beer.csv")
data_ts=ts(data = data$Monthly.beer.production, start=c(1956,1),end = c(1995,8),frequency = 12)
data_ts
point=cpt.mean(data_ts)
point
point=data_ts[164]
point
pat1=data_ts[1:164]
pat1
part2=data_ts[165:]
part2=data_ts[165:-1]
length(data_ts)
part2=data_ts[165:length(data_ts)]
ts.plot(data_ts)
data_ts
point
part1=data_ts[1:164]
one_time = ts(part1,start = c(1956,1),end = c(1969,8))
ts.plot(one_time)
part1
one_time
one_time
part1=data_ts[1:164]
one_time = ts(part1,start = c(1956,1),end = c(1969,8))
ts.plot(one_time)
one_time
part1
type(part1)
class(part1)
part1=as.data.frame(part1)
part1
one_time = ts(part1,start = c(1956,1),end = c(1969,8))
ts.plot(one_time)
ts.plot(one_time)
one_time
one_time = ts(part1,start = c(1956,1),end = c(1969,8),frequency = 12)
ts.plot(one_time)
ts.plot(data_ts)
ts.plot(one_time)
install.packages("bcp")
point=cpt.mean(data_ts,method = "AMOC") #164    en agosto de 1969
point
point=cpt.mean(data_ts,method = "PELT") #164    en agosto de 1969
point
data_ts
point=data_ts[342]
point
one_time = ts(part1,start = c(1956,1),end = c(1984,6),frequency = 12)
ts.plot(one_time)
library(forecast)
library(timeSeries)
library(nortest)
library(tseries)
library(TSA)
library(lmtest)
library(ggplot2)
data=read.csv("monthly_beer.csv")
data_ts=ts(data = data$Monthly.beer.production, start=c(1956,1),end = c(1995,8),frequency = 12)
data_ts
ts.plot(data_ts)
point=cpt.mean(data_ts,method = "PELT") #342   en agosto de 1969
point=data_ts[342]
part1=data_ts[1:342]
part1=as.data.frame(part1)
part2=data_ts[343:length(data_ts)]
one_time = ts(part1,start = c(1956,1),end = c(1984,6),frequency = 12)
ts.plot(one_time)
install.packages("strucchange")
#point=cpt.mean(data_ts,method = "PELT") #342   en agosto de 1969
point=breakpoints(data_ts)
point
#point=cpt.mean(data_ts,method = "PELT") #342   en agosto de 1969
point=breakpoints(data_ts~1)
point
#point=cpt.mean(data_ts,method = "PELT") #342   en agosto de 1969
point=breakpoints(data_ts~1)
point
#point=cpt.mean(data_ts,method = "PELT") #342   en agosto de 1969
point=breakpoints(data_ts, breaks = 2)
point
#point=cpt.mean(data_ts,method = "PELT") #342   en agosto de 1969
point=breakpoints(data_ts, breaks = 1)
library(strucchange)
#point=cpt.mean(data_ts,method = "PELT") #342   en agosto de 1969
point=breakpoints(data_ts, breaks = 1)
data_ts
#point=cpt.mean(data_ts,method = "PELT") #342   en agosto de 1969
point=breakpoints(data$Monthly.beer.production, breaks = 1)
?breakpoints
data=read.csv("monthly_beer.csv")
data_ts=ts(data = data$Monthly.beer.production, start=c(1956,1),end = c(1995,8),frequency = 12)
data_ts
ts.plot(data_ts)
fs.data=Fstats(data$Monthly.beer.production ~1)
fs.data
plot(fs.data)
breakpoints(fs.data)
lines(breakpoints(fs.data))
bp.data <- breakpoints(data$Monthly.beer.production ~ 1)
summary(bp.data)
summary(bp.data)
point=data_ts[324]
point
data_ts
one_time = ts(part1,start = c(1956,1),end = c(1982,12),frequency = 12)
ts.plot(one_time)
second_time=ts(part2,start = c(1983,1),end = c(1995,8),frequency = 12)
ts.plot(second_time)
ts.plot(data_ts)
ts.plot(one_time)
second_time=ts(part2,start = c(1983,1),end = c(1995,8),frequency = 12)
ts.plot(second_time)
t1=seq(1956,1982.9999,by=1/12)
t1
t1=seq(1956,1983,by=1/12)
length(one_time)
length(t1)
t1=seq(1956,1982.999,by=1/12)
length(t1)
bptest(one_time~t1)
adf.test(one_time)
kpss.test(one_time)
trans_one=log(one_time)
ts.plot(trans_one)
bptest(trans_one~t1)
adf.test(one_time)
kpss.test(one_time)
adf.test(one_time)
kpss.test(one_time)
adf.test(trans_one)
kpss.test(trans_one)
dif_one=diff(one_time)
ts.plot(dif_one)
time=1:length(dif_one)
bptest(dif_one~time)
dif_one=diff(trans_one)
ts.plot(dif_one)
time=1:length(dif_one)
bptest(dif_one~time)
adf.test(dif_one)
kpss.test(dif_one)
adf.test(dif_one)
kpss.test(dif_one)
bptest(dif_one~time)
fit=auto.arima(dif_one)
summary(fit)
residuals_num=as.numeric(fit$residuals)
t_res=1:length(residuals_num)
bptest(residuals_num~t_res)
fit=auto.arima(data_ts)
summary(fit)
residuals_num=as.numeric(fit$residuals)
t_res=1:length(residuals_num)
bptest(residuals_num~t_res)
