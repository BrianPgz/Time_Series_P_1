q_d= 1-(q_u)
y_payoff=c()
n_nodos
PayOff_put_largo<- function(s_n,n,q_u,q_d,B_desc){
tamanio=length(s_n)
y_payoff=c()
for(i in (tamanio-n):tamanio){
y_payoff[i]= max(k-s_n[i],0)}
y_payoff
(contador <- tamanio-n-1)
(contador2 <- tamanio)
(delta_auxiliar <-  n)
vect_alphas=c()
vect_betas=c()
for (j in 1:n) {
for (i in 1:delta_auxiliar) {
(y_payoff[contador]= B_desc *(q_u *y_payoff[contador2]  +    q_d*y_payoff[contador2-1]) )
vect_alphas[contador] = (y_payoff[contador2] - y_payoff[contador2-1])/(s_n[contador2] -s_n[contador2-1])
vect_betas[contador] = B_desc*(y_payoff[contador2]- vect_alphas[contador]*    s_n[contador2]   )
(contador2 <- contador2-1)
(contador <-  contador -1)
}
(contador2 <- contador2-1)
(delta_auxiliar <- delta_auxiliar-1)
}
print("Composicion de alphas:")
print(vect_alphas)
print("composicion de betas:")
print(vect_betas)
return(y_payoff)
}
PayOff_put_largo(s_n,n,q_u,q_d,B_desc)
####Fucion####
n_nodos <- (n+1)*(1 + (n+1))/2
(delta=1)
(B_desc= exp(-r*delta))
#B_desc= 0.5
B_future = 1/B_desc
n_nodos <- (n+1)*(1 + (n+1))/2
(delta=1)
(B_desc= exp(-r*delta))
#B_desc= 0.5
B_future = 1/B_desc
#(q_u= .290929496)
q_u= ((B_future-d)/(u-d))
q_d= 1-(q_u)
y_payoff=c()
n_nodos
PayOff_call_largo<- function(s_n,n,q_u,q_d,B_desc){
tamanio=length(s_n)
y_payoff=c()
for(i in (tamanio-n):tamanio){
y_payoff[i]= max(s_n[i]-k,0)}
y_payoff
vect_alphas=c()
vect_betas=c()
(contador <- tamanio-n-1)
(contador2 <- tamanio)
(delta_auxiliar <-  n)
for (j in 1:n) {
for (i in 1:delta_auxiliar) {
(y_payoff[contador]= B_desc *(q_u *y_payoff[contador2]  +    q_d*y_payoff[contador2-1]) )
vect_alphas[contador] = (y_payoff[contador2] - y_payoff[contador2-1])/(s_n[contador2] -s_n[contador2-1])
vect_betas[contador] = B_desc*(y_payoff[contador2]- vect_alphas[contador]*    s_n[contador2]   )
(contador2 <- contador2-1)
(contador <-  contador -1)
}
(contador2 <- contador2-1)
(delta_auxiliar <- delta_auxiliar-1)
}
print("Composicion de alphas:")
print(vect_alphas)
print("composicion de betas:")
print(vect_betas)
return(y_payoff)
}
PayOff_call_largo(s_n,n,q_u,q_d,B_desc)
library(tsdl)
detach("package:tsdl", unload = TRUE)
library(tsdl)
library(forecast)
library(timeSeries)
library(nortest)
library(tseries)
library(TSA)
library(lmtest)
library(ggplot2)
library(imputeTS)
library(grid)
library(devtools)
library(tsdl)
?rnorm
n=365
mean=0
sd=1
data=rnorm(n=n,mean=mean,sd = sd)
data_f=data.frame(x=data)
data_f
library(ggplot2)
n=365
mean=0
sd=1
data=rnorm(n=n,mean=mean,sd = sd)
data_f=data.frame(x=data)
graph1=ggplot(data_f, aes(x=x))+ geom_hist()
graph1=ggplot(data_f, aes(x=x)) + geom_histogram()
graph1
n=365
mean=0
sd=1
data=rnorm(n=n,mean=mean,sd = sd)
data_f=data.frame(x=data)
graph1=ggplot(data_f, aes(x=x)) + geom_histogram(bins=100)
graph1
#Random Walk simulation
set.seed(100)
set.seed(100)
n=365
mean=0
sd=1
data=rnorm(n=n,mean=mean,sd = sd)
data_f=data.frame(x=data)
graph1=ggplot(data_f, aes(x=x)) + geom_histogram(bins=100)
graph1
set.seed(100)
n=365
mean=0
sd=1
data=rnorm(n=n,mean=mean,sd = sd)
data_f=data.frame(x=data)
graph1=ggplot(data_f, aes(x=x)) + geom_histogram(bins=100)
graph1
data_sim=rnorm(n=n,mean=mean,sd = sd)
data_acum=cumsum(data_sim)
data_acum
t=1:n
t
prices=function(x0,mean,sd){
data_sim=rnorm(n=n,mean=mean,sd = sd)
data_acum=cumsum(data_sim)
t=1:n
stock=   x0 + t*mean + data_acum
return(stock)
}
random_walk = prices(x0=x0,mean=mean,sd=sd)
x0=18000
prices=function(x0,mean,sd){
data_sim=rnorm(n=n,mean=mean,sd = sd)
data_acum=cumsum(data_sim)
t=1:n
stock=   x0 + t*mean + data_acum
return(stock)
}
random_walk = prices(x0=x0,mean=mean,sd=sd)
random_frame=data.frame(random_walk)
random_frame
random_frame["time"]=0:n
random_frame["time"]= c(0:n)
random_frame["time"]= c(1:n)
random_frame
x0=18000
prices=function(x0,mean,sd){
data_sim=rnorm(n=n,mean=mean,sd = sd)
data_acum=cumsum(data_sim)
t=1:n
stock=c()
stock[1]=xo
for (i in 2:n ) {
stock[i]=   x0 + t*mean + data_acum
}
return(stock)
}
random_walk = prices(x0=x0,mean=mean,sd=sd)
x0=18000
prices=function(x0,mean,sd){
data_sim=rnorm(n=n,mean=mean,sd = sd)
data_acum=cumsum(data_sim)
t=1:n
stock=c()
stock[1]=xo
for (i in 2:n ) {
stock[i]=   x0 + t*mean + data_acum
}
return(stock)
}
random_walk = prices(x0=x0,mean=mean,sd=sd)
x0=18000
prices=function(x0,mean,sd){
data_sim=rnorm(n=n,mean=mean,sd = sd)
data_acum=cumsum(data_sim)
t=1:n
stock=c()
stock[1]=x0
for (i in 2:n ) {
stock[i]=   x0 + t*mean + data_acum
}
return(stock)
}
random_walk = prices(x0=x0,mean=mean,sd=sd)
random_frame=data.frame(random_walk)
random_frame
x0=18000
prices=function(x0,mean,sd){
data_sim=rnorm(n=n,mean=mean,sd = sd)
data_acum=cumsum(data_sim)
t=1:n
stock=c()
stock[1]=x0
stock[2:n]= x0 + t*mean + data_acum
return(stock)
}
random_walk = prices(x0=x0,mean=mean,sd=sd)
#Random Walk simulation
set.seed(100)
n=364
mean=0
sd=1
data=rnorm(n=n,mean=mean,sd = sd)
data_f=data.frame(x=data)
graph1=ggplot(data_f, aes(x=x)) + geom_histogram(bins=100)
x0=18000
prices=function(x0,mean,sd){
data_sim=rnorm(n=n,mean=mean,sd = sd)
data_acum=cumsum(data_sim)
t=1:n
stock=c()
stock[1]=x0
stock= x0 + t*mean + data_acum
return(stock)
}
random_walk = prices(x0=x0,mean=mean,sd=sd)
random_frame=data.frame(random_walk)
random_frame
random_frame["time"]= c(1:n)
graph2= ggplot(data=random_frame,aes(x=time,y=random_walk)) + geom_line()
graph2
set.seed(101)
n=364
mean=0
sd=1
data=rnorm(n=n,mean=mean,sd = sd)
data_f=data.frame(x=data)
graph1=ggplot(data_f, aes(x=x)) + geom_histogram(bins=100)
x0=18000
prices=function(x0,mean,sd){
data_sim=rnorm(n=n,mean=mean,sd = sd)
data_acum=cumsum(data_sim)
t=1:n
stock=c()
stock[1]=x0
stock= x0 + t*mean + data_acum
return(stock)
}
random_walk = prices(x0=x0,mean=mean,sd=sd)
random_frame=data.frame(random_walk)
random_frame["time"]= c(1:n)
graph2= ggplot(data=random_frame,aes(x=time,y=random_walk)) + geom_line()
graph2
random_walk
install.packages("xlsx")
library("xlsx")
install.packages("xlsx")
library(xlsx)
library("xlsx")
library(xlsx)
library(xlsxjars)
install.packages("rJava")
library(xlsx)
library(xlsxjars)
library(rJava)
install.packages("markovchain")
library(forecast)
library(timeSeries)
library(nortest)
library(tseries)
library(TSA)
library(lmtest)
library(ggplot2)
data=read.csv("monthly_beer.csv")
data_ts=ts(data = data$Monthly.beer.production, start=c(1956,1),end = c(1995,8),frequency = 12)
data_ts
data_ts
data=read.csv("monthly_beer.csv")
setwd("~/Septimo/Estadistica 3/proyecto_1/Time_Series_P_1")
data=read.csv("monthly_beer.csv")
data_ts=ts(data = data$Monthly.beer.production, start=c(1956,1),end = c(1995,8),frequency = 12)
data_ts
ts.plot(data_ts)
bp.data <- breakpoints(data$Monthly.beer.production ~ 1)
?breakpoints
??breakpoints
library(strucchange)
bp.data <- breakpoints(data$Monthly.beer.production ~ 1)
summary(bp.data)
#point=cpt.mean(data_ts,method = "PELT") #342   en agosto de 1969
point=breakpoints(data$Monthly.beer.production, breaks = 1)
point
#point=cpt.mean(data_ts,method = "PELT") #342   en agosto de 1969
point=breakpoints(data$Monthly.beer.production, breaks = 1)
#point=cpt.mean(data_ts,method = "PELT") #342   en agosto de 1969
point=breakpoints(data$Monthly.beer.production ~1, breaks = 1)
point
summary(bp.data)
bp.data
summary(bp.data)
point=data_ts[324]
part1=data_ts[1:324]
part1=as.data.frame(part1)
part2=data_ts[325:length(data_ts)]
part2=as.data.frame(part2)
one_time = ts(part1,start = c(1956,1),end = c(1982,12),frequency = 12)
ts.plot(one_time)
second_time=ts(part2,start = c(1983,1),end = c(1995,8),frequency = 12)
ts.plot(second_time)
second_time
t2=seq(1983,1995.59,by=1/12)
t2
length(second_time)
length(t2)
bptest(second_time~t2)
adf.test(second_time)
kpss.test(second_time)
fit=auto.arima(second_time)
fit2=auto.arima(second_time)
summary(fit2)
residuals_num=as.numeric(fit2$residuals)
residuals_num2=as.numeric(fit2$residuals)
t_res2=1:length(residuals_num2)
bptest(residuals_num~t_res2)
jarque.bera.test(residuals_num)
plot(residuals_num2)
t_res2=1:length(residuals_num2)
bptest(residuals_num~t_res2)
jarque.bera.test(residuals_num)
shapiro.test(residuals_num2)
hist(residuals_num2)
shapiro.test(residuals_num2)
t.test(residuals_num2)
checkresiduals(fit2)
ts.plot(second_time)
t2=seq(1983,1995.59,by=1/12)
bptest(second_time~t2)
adf.test(second_time)
kpss.test(second_time)
fit2=auto.arima(second_time)
summary(fit2)
residuals_num2=as.numeric(fit2$residuals)
plot(residuals_num2)
hist(residuals_num2)
t_res2=1:length(residuals_num2)
bptest(residuals_num~t_res2)
tsdiag(fit2)
log_second=log(second_time)
ts.plot(log_second)
ts.plot(second_time)
ts.plot(log_second)
log_arima=auto.arima(log_second)
summary(log_arima)
residual_log=as.numeric(log_arima$residuals)
jarque.bera.test(residual_log)
shapiro.test(residual_log)
decompose(log_second)
plot(decom)
decom_log=decompose(log_second)
plot(decom_log)
tsdiag(log_arima)
bptest(residual_log~t_t)
t_t=1:length(residual_log)
bptest(residual_log~t_t)
log_second=log(second_time)
ts.plot(log_second)
decom_log=decompose(log_second)
plot(decom_log)
log_arima=auto.arima(log_second)
summary(log_arima)
residual_log=as.numeric(log_arima$residuals)
t_t=1:length(residual_log)
bptest(residual_log~t_t)
jarque.bera.test(residual_log)
shapiro.test(residual_log)
tsdiag(log_arima)
checkresiduals(log_arima)
ARMA_forecast<- predict(log_arima, n.ahead =3)$pred
ARMA_forecast_se <- predict(log_arima, n.ahead = 3)$se
ts.plot(log_second, xlim=c(1956,1996), main="Prediccion")
points(ARMA_forecast, type = "l", col = "blue")
#Intervalos de prediccion
points(ARMA_forecast - qnorm(0.975)*ARMA_forecast_se, type = "l", col ="red", lty = 2)
points(ARMA_forecast + qnorm(0.975)*ARMA_forecast_se, type = "l", col ="red", lty = 2)
ARMA_forecast<- predict(log_arima, n.ahead =3)$pred
ARMA_forecast
ARMA_forecast<- predict(log_arima, n.ahead =24)$pred
ARMA_forecast
ARMA_forecast<- predict(log_arima, n.ahead =24)$pred
ARMA_forecast_se
ARMA_forecast_se <- predict(log_arima, n.ahead = 24)$se
ARMA_forecast_se
ts.plot(log_second, xlim=c(1956,1996), main="Prediccion")
ts.plot(log_second, xlim=c(1983,1996), main="Prediccion")
points(ARMA_forecast, type = "l", col = "blue")
#Intervalos de prediccion
points(ARMA_forecast - qnorm(0.975)*ARMA_forecast_se, type = "l", col ="red", lty = 2)
points(ARMA_forecast + qnorm(0.975)*ARMA_forecast_se, type = "l", col ="red", lty = 2)
forecast2anios<- forecast(log_arima, h= 24, level=c(80,95), fan = FALSE, lambda = NULL, biasadj = NULL)
forecast2anios
plot(forecast2anios)
setwd("~/Septimo/Estadistica 3/proyecto_1/Time_Series_P_1")
knitr::opts_chunk$set(echo = TRUE)
library(forecast)
library(timeSeries)
library(nortest)
library(tseries)
library(TSA)
library(lmtest)
library(ggplot2)
Data_beer= read.csv(file = "monthly_beer.csv")
head(Data_beer)
tamanio_base = length(Data_beer$Month)
tamanio_base
Data_beer$Month[1]
Data_beer$Month[476]
S_beer = ts(Data_beer$Monthly.beer.production, start = c(1956, 1), end = c(1995, 8), frequency = 12)
head(S_beer,24)
ts.plot(S_beer,main = "Serie de tiempo de producción mensual de cerveza")
mean(S_beer)
var(S_beer)
sd(S_beer)
tsdisplay(S_beer, main = "Serie de tiempo de producción mensual de cerveza")
desc_datos = decompose(S_beer)
plot(desc_datos)
t1=seq(1956,1995.59,by=1/12)
bptest( S_beer ~ t1)
adf.test(S_beer)
kpss.test(S_beer)
plot(cycle(S_beer),main="Ciclos")
log_S_beer = log(S_beer)
ts.plot(log_S_beer, main= "logaritmo de la serie")
bptest(log_S_beer~ t1)
adf.test(log_S_beer)
kpss.test(log_S_beer)
desc_datos = decompose(log_S_beer)
plot(desc_datos)
time=t1
time2=t1*t1
time3=t1*t1*t1
regresion_simple= lm(log_S_beer ~ time)
plot(log_S_beer,main="Serie con varianza constante (Logaritmo)",lwd = 3, xlab = "Tiempo", col = "black")
lines(time,regresion_simple$fitted.values,col="blue",lwd = 3)
time=t1
time2=t1*t1
time3=t1*t1*t1
regresion_square= lm(log_S_beer ~ time + time2)
plot(log_S_beer,main="Serie con varianza constante (Logaritmo)",lwd = 3, xlab = "Tiempo", col = "black")
lines(time,regresion_square$fitted.values,col="blue",lwd = 3)
time_plus=seq(1956,1998.59,by=1/12)
time_plus2=time_plus*time_plus
time_plus3=time_plus*time_plus*time_plus
df_pred <- data.frame(X = time_plus,Y=time_plus2 , Z = c(log_S_beer, rep(NA, 36) ))
predictions <- lm(formula = Z ~ X + Y, data = df_pred)
predictor=predict(object = predictions, newdata = df_pred)
plot_serie=plot(log_S_beer,main="Serie con varianza constante (Logaritmo y Prediccion de 3 años)",lwd = 3, xlab = "Tiempo", col = "black",xlim=c(1956,1999))
lines(time_plus,predictor,col="blue",lwd = 3)
diff_S_berr = diff(log_S_beer)
plot(diff_S_berr)
new_t= t1[2:(length(t1))]
bptest(diff_S_berr ~ new_t)
adf.test(diff_S_berr)
kpss.test(diff_S_berr)
kpss.test(diff_S_berr)
ARMA_forecast<- predict(log_arima, n.ahead =24)$pred
ARMA_forecast_se <- predict(log_arima, n.ahead = 24)$se
ts.plot(log_second, xlim=c(1983,1996), main="Prediccion")
points(ARMA_forecast, type = "l", col = "blue")
#Intervalos de prediccion
points(ARMA_forecast - qnorm(0.975)*ARMA_forecast_se, type = "l", col ="red", lty = 2)
points(ARMA_forecast + qnorm(0.975)*ARMA_forecast_se, type = "l", col ="red", lty = 2)
forecast2anios<- forecast(log_arima, h= 24, level=c(56,95), fan = FALSE, lambda = NULL, biasadj = NULL)
forecast2anios
plot(forecast2anios)
log_second=log(second_time)
ts.plot(log_second)
decom_log=decompose(log_second)
plot(decom_log)
log_arima=auto.arima(log_second)
summary(log_arima)
residual_log=as.numeric(log_arima$residuals)
t_t=1:length(residual_log)
bptest(residual_log~t_t)
jarque.bera.test(residual_log)
shapiro.test(residual_log)
tsdiag(log_arima)
checkresiduals(log_arima)
ARMA_forecast<- predict(log_arima, n.ahead =24)$pred
ARMA_forecast_se <- predict(log_arima, n.ahead = 24)$se
ts.plot(log_second, xlim=c(1983,1999), main="Prediccion")
points(ARMA_forecast, type = "l", col = "blue")
points(ARMA_forecast - qnorm(0.975)*ARMA_forecast_se, type = "l", col ="red", lty = 2)
points(ARMA_forecast + qnorm(0.975)*ARMA_forecast_se, type = "l", col ="red", lty = 2)
ts.plot(log_second, xlim=c(1983,1987), main="Prediccion")
points(ARMA_forecast, type = "l", col = "blue")
#Intervalos de prediccion
points(ARMA_forecast - qnorm(0.975)*ARMA_forecast_se, type = "l", col ="red", lty = 2)
points(ARMA_forecast + qnorm(0.975)*ARMA_forecast_se, type = "l", col ="red", lty = 2)
ts.plot(log_second, xlim=c(1983,1997), main="Prediccion")
points(ARMA_forecast, type = "l", col = "blue")
#Intervalos de prediccion
points(ARMA_forecast - qnorm(0.975)*ARMA_forecast_se, type = "l", col ="red", lty = 2)
points(ARMA_forecast + qnorm(0.975)*ARMA_forecast_se, type = "l", col ="red", lty = 2)
bp.data <- breakpoints(Data_beer$Monthly.beer.production ~ 1)
summary(bp.data)
summary(bp.data)
bp.data <- breakpoints(Data_beer$Monthly.beer.production ~ 1)
